--[[ This is a diff of the working modded readerfooter.lua. ]]

diff --git a/frontend/apps/reader/modules/readerfooter.lua b/frontend/apps/reader/modules/readerfooter.lua
index 5aa7c4ea8..e61593116 100644
--- a/frontend/apps/reader/modules/readerfooter.lua
+++ b/frontend/apps/reader/modules/readerfooter.lua
@@ -55,6 +55,7 @@ local MODE = {
     book_author = 18,
     page_turning_inverted = 19, -- includes both page-turn-button and swipe-and-tap inversion
     dynamic_filler = 20,
+    apm_status = 21,
 }

 local symbol_prefix = {
@@ -82,6 +83,8 @@ local symbol_prefix = {
         wifi_status = C_("FooterLetterPrefix", "W:"),
         -- @translators This is the footer letter prefix for page turning status.
         page_turning_inverted = C_("FooterLetterPrefix", "Pg:"),
+        -- footer letter  prefix for AirPlane mode
+        apm_status = C_("FooterLetterPrefix", "AP:"),
     },
     icons = {
         time = "⌚",
@@ -99,6 +102,8 @@ local symbol_prefix = {
         wifi_status_off = "",
         page_turning_inverted = "⇄",
         page_turning_regular = "⇉",
+        apm_status = "\u{F1D8}",
+        apm_status_off = "\u{F1D9}",
     },
     compact_items = {
         time = nil,
@@ -117,6 +122,8 @@ local symbol_prefix = {
         wifi_status_off = "",
         page_turning_inverted = "⇄",
         page_turning_regular = "⇉",
+        apm_status = "꜌",
+        apm_status_off = "꜍",
     }
 }
 if BD.mirroredUILayout() then
@@ -464,6 +471,35 @@ footerTextGeneratorMap = {
             return filler_space:rep(filler_nb), true
         end
     end,
+    apm_status = function(footer)
+        local LuaSettings = require("luasettings")
+        local DataStorage = require("datastorage")
+        local reader_settings = LuaSettings:open(DataStorage:getDataDir().."/settings.reader.lua")
+        local ap_status = reader_settings:isTrue("airplanemode")
+        local symbol_type = footer.settings.item_prefix
+        if symbol_type == "icons" or symbol_type == "compact_items" then
+            if ap_status then
+                return symbol_prefix.icons.apm_status
+            else
+                if footer.settings.all_at_once and footer.settings.hide_empty_generators then
+                    return ""
+                else
+                    return symbol_prefix.icons.apm_status_off
+                end
+            end
+        else
+            local prefix = symbol_prefix[symbol_type].apm_status
+            if ap_status then
+                return T(_("%1 On"), prefix)
+            else
+                if footer.settings.all_at_once and footer.settings.hide_empty_generators then
+                    return ""
+                else
+                    return T(_("%1 Off"), prefix)
+                end
+            end
+        end
+    end,
 }

 local ReaderFooter = WidgetContainer:extend{
@@ -533,6 +569,7 @@ ReaderFooter.default_settings = {
     progress_pct_format = "0",
     pages_left_includes_current_page = false,
     initial_marker = false,
+    apm_status = false,
 }

 function ReaderFooter:init()
@@ -543,6 +580,7 @@ function ReaderFooter:init()
     -- Remove items not supported by the current device
     if not Device:hasFastWifiStatusQuery() then
         MODE.wifi_status = nil
+        MODE.apm_status = nil
     end
     if not Device:hasFrontlight() then
         MODE.frontlight = nil
@@ -855,12 +893,14 @@ function ReaderFooter:rescheduleFooterAutoRefreshIfNeeded()
     local schedule = false
     if self.settings.auto_refresh_time then
         if self.settings.all_at_once then
-            if self.settings.time or self.settings.battery or self.settings.wifi_status or self.settings.mem_usage then
+            if self.settings.time or self.settings.battery or self.settings.wifi_status
+            or self.settings.mem_usage or self.settings.apm_status then
                 schedule = true
             end
         else
             if self.mode == self.mode_list.time or self.mode == self.mode_list.battery
-                    or self.mode == self.mode_list.wifi_status or self.mode == self.mode_list.mem_usage then
+                    or self.mode == self.mode_list.wifi_status or self.mode == self.mode_list.mem_usage
+                    or self.mode == self.mode_list.apm_status then
                 schedule = true
             end
         end
@@ -1033,6 +1073,7 @@ function ReaderFooter:textOptionTitles(option)
             self.custom_text_repetitions > 1 and
             string.format(" × %d", self.custom_text_repetitions) or ""),
         dynamic_filler = _("Dynamic filler"),
+        apm_status = T(_("AirPlane Mode status (%1)"), symbol_prefix[symbol].apm_status)
     }
     return option_titles[option]
 end
@@ -1426,6 +1467,9 @@ function ReaderFooter:addToMainMenu(menu_items)
     table.insert(footer_items, getMinibarOption("book_chapter"))
     table.insert(footer_items, getMinibarOption("custom_text"))
     table.insert(footer_items, getMinibarOption("dynamic_filler"))
+    if Device:hasFastWifiStatusQuery() then
+        table.insert(footer_items, getMinibarOption("apm_status"))
+    end

     -- configure footer_items
     table.insert(sub_items, {
@@ -2663,7 +2707,7 @@ ReaderFooter.onCharging    = ReaderFooter.onFrontlightStateChanged
 ReaderFooter.onNotCharging = ReaderFooter.onFrontlightStateChanged

 function ReaderFooter:onNetworkConnected()
-    if self.settings.wifi_status then
+    if self.settings.wifi_status or self.settings.apm_status then
         self:maybeUpdateFooter()
     end
 end